# -*- coding: utf-8 -*-
"""PRUEBA PROYECTO ViII.

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16Dys8XNRiVDXk74FlkVtvfPiKOQA4Imh
"""



file_name = 'PROYECTO VIII ECONOMÍA Y TRABAJO.xlsx'



####PAQUETES#####

import dash
from dash import dcc, html
import dash_bootstrap_components as dbc
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from dash import Input, Output

df = pd.read_excel('PROYECTO VIII ECONOMÍA Y TRABAJO.xlsx', sheet_name=None)                                                                          
file_path = 'PROYECTO VIII ECONOMÍA Y TRABAJO.xlsx'
xls = pd.ExcelFile('PROYECTO VIII ECONOMÍA Y TRABAJO.xlsx')



                                                                        #### DATOS ##

 
df_general=pd.read_excel(file_name,sheet_name='GENERAL')
df_municipios=pd.read_excel(file_name,sheet_name='MUNICIPIOS ECONOMÍA')
df_municipios_2=pd.read_excel(file_name,sheet_name='MUNICIPIOS')
df_pea=pd.read_excel(file_name,sheet_name='PEA')
df_pea_genero=pd.read_excel(file_name,sheet_name='PEA GÉNERO')
df_sectores=pd.read_excel(file_name,sheet_name='SECTOR')
df_estrato=pd.read_excel(file_name,sheet_name='ESTRATO SOCIOECONÓMICO')
df_salarios=pd.read_excel(file_name,sheet_name='SALARIOS')
df_edad=pd.read_excel(file_name,sheet_name='EDAD')
df_profesiones=pd.read_excel(file_name,sheet_name='PROFESIONES')
df_mapa = pd.read_excel(file_name, sheet_name='MUNICIPIOS ECONOMÍA')


# Datos a mostrar en los cuadros
df_general = {
    'Población ocupada': '98.54%',
    'Población económicamente activa': '57.20%',
    'Ingreso promedio mensual': '$11,178',
    'Hombres': '50.40%',
    'Mujeres': '49.60%',
    'Formalidad': '35.33%',
    'Informalidad': '64.67%'
}

# Datos para los gráficos
# df_pea - Población Económicamente Activa (PEA)
df_pea = pd.DataFrame({
    'AÑO': [2020, 2021, 2022, 2023, 2024],
    'PEA 1T': [851025, 806650, 833317, 877664, 887869],
    'PEA2T': ['S/D', 833429, 823846, 870630, 873166],
    'PEA3T': [809827, 836743, 849133, 863509, 888038],
    'PEA4T': [834927, 830832, 859002, 893467, 'S/D']
})



# df_pea_genero - Población Económicamente Activa por Sexo
df_pea_genero = pd.DataFrame({
    'SEXO': ['HOMBRES', 'HOMBRES', 'HOMBRES', 'HOMBRES', 'HOMBRES', 'MUJERES', 'MUJERES', 'MUJERES', 'MUJERES', 'MUJERES'],
    'AÑO': [2020, 2021, 2022, 2023, 2024, 2020, 2021, 2022, 2023, 2024],
    'PEA 1T': [504204, 479895, 496848, 496594, 508443, 346821, 326755, 336469, 381070, 379426],
    'PEA2T': ['S/D', 506067, 484895, 500152, 503398, 'S/D', 327362, 338951, 370478, 369768],
    'PEA3T': [482151, 506233, 497248, 501141, 520229, 327746, 330510, 351885, 362368, 367809],
    'PEA4T': [491615, 493277, 493522, 510900, 'S/D', 343312, 337105, 365480, 382557, 'S/D']
})

# Función para crear el gráfico 'GENERAL'
def create_general_graph():
    fig_general = go.Figure()

    fig_general.add_trace(go.Scatter(x=df_pea['AÑO'], y=df_pea['PEA 1T'], mode='lines', name='PEA Total', line=dict(color='#4A90E2')))

    fig_general.update_layout(
        title="Población Económicamente Activa (PEA) por Trimestre",
        xaxis_title="Año",
        yaxis_title="PEA",
        xaxis=dict(tickvals=[2020, 2021, 2022, 2023]),  # Ajustamos el eje X para mostrar solo los años completos
        template="plotly_dark"
    )

    return fig_general


# Función para crear el gráfico 'SEXO'
def create_sex_graph():
    df_hombres = df_pea_genero[df_pea_genero['SEXO'] == 'HOMBRES']
    df_mujeres = df_pea_genero[df_pea_genero['SEXO'] == 'MUJERES']

    fig_sexo = go.Figure()

    # Líneas para "Hombres"
    fig_sexo.add_trace(go.Scatter(x=df_hombres['AÑO'], y=df_hombres['PEA 1T'], mode='lines', name='Hombres', line=dict(color='#4A90E2')))
    fig_sexo.add_trace(go.Scatter(x=df_hombres['AÑO'], y=df_hombres['PEA2T'], mode='lines', name='Hombres 2T', line=dict(color='#50E3C2'), visible='legendonly'))
    fig_sexo.add_trace(go.Scatter(x=df_hombres['AÑO'], y=df_hombres['PEA3T'], mode='lines', name='Hombres 3T', line=dict(color='#F5A623'), visible='legendonly'))
    fig_sexo.add_trace(go.Scatter(x=df_hombres['AÑO'], y=df_hombres['PEA4T'], mode='lines', name='Hombres 4T', line=dict(color='#D0021B'), visible='legendonly'))

    # Líneas para "Mujeres"
    fig_sexo.add_trace(go.Scatter(x=df_mujeres['AÑO'], y=df_mujeres['PEA 1T'], mode='lines', name='Mujeres', line=dict(color='#F5A623')))
    fig_sexo.add_trace(go.Scatter(x=df_mujeres['AÑO'], y=df_mujeres['PEA2T'], mode='lines', name='Mujeres 2T', line=dict(color='#D0021B'), visible='legendonly'))
    fig_sexo.add_trace(go.Scatter(x=df_mujeres['AÑO'], y=df_mujeres['PEA3T'], mode='lines', name='Mujeres 3T', line=dict(color='#4A90E2'), visible='legendonly'))
    fig_sexo.add_trace(go.Scatter(x=df_mujeres['AÑO'], y=df_mujeres['PEA4T'], mode='lines', name='Mujeres 4T', line=dict(color='#50E3C2'), visible='legendonly'))

    # Ajustes del gráfico
    fig_sexo.update_layout(
        title="Población Económicamente Activa por Sexo",
        xaxis_title="Año",
        yaxis_title="PEA",
        xaxis=dict(tickvals=[2020, 2021, 2022, 2023, 2024]),  # Ajustar eje X a los años completos
        template="plotly_dark",
        legend_title="Trimestres"
    )

    return fig_sexo

df_sectores = pd.DataFrame({
    'AÑO': [2024, 2024, 2024, 2023, 2023, 2023, 2023,  2022, 2022, 2022, 2022, 2021, 2021, 2021, 2021, 2020, 2020, 2020],
    'TRIMESTRE': ['TERCERO', 'SEGUNDO', 'PRIMERO', 'CUARTO', 'TERCERO', 'SEGUNDO', 'PRIMERO', 'CUARTO', 'TERCERO', 'SEGUNDO', 'PRIMERO', 'CUARTO', 'TERCERO', 'SEGUNDO', 'PRIMERO', 'CUARTO', 'TERCERO', 'PRIMERO'],
    'SECTOR PRIMARIO': [90982, 80983, 71554, 82266, 80065, 82735, 67887 , 88592, 87814, 78637, 70682, 82290, 86915, 65499, 64988, 88940, 93767, 102354],
    'SECTOR SECUNDARIO': [191093, 196104, 204094, 189997, 198556, 191298, 201486, 190286, 196250, 193548, 205400, 188991, 190801, 200247, 186096, 182756, 181113, 177366],
    'SECTOR TERCIARIO': [604157, 593600, 610249, 620053, 582868, 594372, 607584,576982, 563612, 549901, 555945, 556387, 555397, 564229, 552743, 561442, 533491, 568876],
    'NO ESPECIFICADO': [1806, 2479, 1972, 1141, 2020, 2225, 707, 3142, 1457, 1760, 1290, 2714, 3630, 3454, 2823, 1789, 1526, 2429]
})

# df_sectores - Sectores económicos por trimestre
df_sectores_estratos = pd.DataFrame({
        'AÑO': [2024, 2023, 2022, 2021, 2020],
        'Bajo': [126471, 114792, 105000, 120000, 98000],
        'Medio bajo': [572341, 616963, 570000, 590000, 530000],
        'Medio alto': [149929, 124938, 130000, 135000, 105000],
        'Alto': [39297, 36764, 38000, 35000, 31000]
    })



# Agrupar los datos por AÑO (sumando los valores por cada estrato)
df_grouped = df_sectores.groupby('AÑO').sum().reset_index()


df_salarios = pd.DataFrame({
    'AÑO': [2024, 2024, 2024, 2023, 2023, 2023, 2023, 2022, 2022, 2022, 2022, 2021, 2021, 2021, 2021, 2020, 2020, 2020],
    'TRIMESTRE': ['TERCERO', 'SEGUNDO', 'PRIMERO', 'CUARTO', 'TERCERO', 'SEGUNDO', 'PRIMERO', 'CUARTO', 'TERCERO', 'SEGUNDO', 'PRIMERO', 'CUARTO', 'TERCERO', 'SEGUNDO', 'PRIMERO', 'CUARTO', 'TERCERO', 'PRIMERO'],
    'HASTA UN SALARIO MÍNIMO': [285658, 282057, 277379, 235450, 228928, 257244, 263082, 216184, 224916, 202315, 246677, 151558, 169134, 155513, 168180, 179233, 150688, 168600],
    'MÁS DE 1 HASTA 2 SALARIOS MÍNIMOS': [189877, 172746, 183198, 220411, 204999, 221775, 213609, 208327, 187440, 182709, 187384, 218705, 245202, 223527, 236709, 210054, 205891, 238363],
    'MÁS DE 2 HASTA 3 SALARIOS MÍNIMOS': [26398, 18748, 19286, 35087, 23378, 30932, 31866, 52973, 46740, 43539, 38377, 57035, 64703, 62594, 60085, 68902, 62804, 65856],
    'MÁS DE 3 HASTA 5 SALARIOS MÍNIMOS': [4385, 2182, 3774, 7895, 5242, 6216, 6341, 10236, 7757, 8069, 6485, 19107, 15108, 11029, 15545, 16885, 15613, 17516],
    'MÁS DE 5 SALARIOS MÍNIMOS': [1272, 2307, 1675, 1166, 2621, 2333, 34888, 2821, 4045, 2782, 3684, 5375, 3817, 5448, 3436, 6609, 3233, 3870],
    'NO RECIBE INGRESOS': [36350, 34028, 37146, 36091, 30487, 35259, 30301, 31542, 34388, 25574, 25878, 32899, 33189, 26844, 23652, 36192, 40809, 30816]
})

# Datos de df_edad - Distribución por grupos de edad y periodo
df_edad = pd.DataFrame({
    'AÑO': [2024, 2024, 2024, 2023, 2023, 2023, 2023, 2022, 2022, 2022, 2022, 2021, 2021, 2021, 2021, 2020, 2020, 2020],
    'PERIODO': ['TERCER', 'SEGUNDO', 'PRIMERO', 'CUARTO', 'TERCERO', 'SEGUNDO', 'PRIMERO', 'CUARTO', 'TERCERO', 'SEGUNDO', 'PRIMERO', 'CUARTO', 'TERCERO', 'SEGUNDO', 'PRIMERO', 'CUARTO', 'TERCERO', 'PRIMERO'],
    '15-19 AÑOS': [40694, 37563, 40637, 36378, 36596, 37543, 37689, 38944, 35821, 36215, 38361, 35002, 37012, 36111, 35521, 34012, 35217, 34589],
    '20-29 AÑOS': [171914, 171012, 164992, 179010, 168187, 170985, 174218, 174836, 169812, 176226, 175625, 165417, 167859, 170174, 165348, 160099, 161172, 158761],
    '30-39 AÑOS': [208215, 205574, 205789, 203014, 212817, 211008, 215103, 220320, 221004, 214209, 214225, 210421, 217214, 217956, 215052, 207654, 210358, 213498],
    '40-49 AÑOS': [187106, 187802, 197083, 194549, 192623, 190311, 185900, 189623, 198435, 185112, 190214, 183226, 185411, 188101, 187363, 178947, 176126, 180759],
    '50-59 AÑOS': [168135, 167961, 171418, 168551, 151543, 155633, 159417, 154253, 146814, 151051, 150370, 142853, 137826, 138747, 142614, 140423, 138965, 136481],
    '60 AÑOS Y MÁS': [111482, 103028, 107663, 111841, 101558, 103112, 100887, 95213, 90117, 88793, 90201, 80373, 78594, 79047, 81012, 74792, 72533, 69804]
})

# Calcular el promedio por año de cada grupo de edad
df_edad_avg = df_edad.groupby('AÑO').agg({
    '15-19 AÑOS': 'mean',
    '20-29 AÑOS': 'mean',
    '30-39 AÑOS': 'mean',
    '40-49 AÑOS': 'mean',
    '50-59 AÑOS': 'mean',
    '60 AÑOS Y MÁS': 'mean'
}).reset_index()

df_profesiones = pd.DataFrame({
    'AÑO': [2024, 2024, 2024, 2023, 2023, 2023, 2022, 2022, 2022, 2021, 2021, 2021, 2020, 2020, 2020],
    'PROFESIONISTAS, TÉCNICOS Y TRABAJADORES DEL ARTE HOMBRES': [45721, 47863, 50783, 51742, 56035, 55080, 53513, 49010, 42385, 43161, 37957, 39973, 46502, 38662, 39785],
    'PROFESIONISTAS, TÉCNICOS Y TRABAJADORES DEL ARTE MUJERES': [42861, 40122, 45128, 45699, 44911, 44386, 42035, 37391, 35808, 35935, 36200, 29166, 33075, 31407, 34780],
    'TRABAJADORES DE LA EDUCACIÓN HOMBRES': [11690, 10992, 11219, 10261, 10202, 12298, 14004, 13324, 11941, 10462, 10281, 11152, 12630, 13653, 12315],
    'TRABAJADORES DE LA EDUCACIÓN MUJERES': [223862, 23888, 25475, 21616, 19805, 19699, 17940, 20833, 19566, 20682, 20648, 22994, 20732, 22693, 26106],
    'FUNCIONARIOS Y DIRECTIVOS DE LOS SECTORES PÚBLICO, PRIVADO Y SOCIAL HOMBRES': [4787, 6260, 6424, 6537, 5582, 8455, 6717, 5428, 6230, 3969, 3450, 6829, 8895, 6904, 6040],
    'FUNCIONARIOS Y DIRECTIVOS DE LOS SECTORES PÚBLICO, PRIVADO Y SOCIAL MUJERES': [2850, 3155, 2800, 6229, 4918, 5202, 7102, 5825, 3054, 3487, 4796, 3309, 4683, 2860, 2378],
    'TRABAJADORES EN ACTIVIDADES AGRÍCOLAS, GANADERAS, SILVÍCOLAS, DE CAZA Y DE PESCA HOMBRES': [73184, 71680, 60190, 70930, 66745, 71702, 57045, 74957, 77220, 71423, 63604, 73260, 80433, 61984, 61150],
    'TRABAJADORES EN ACTIVIDADES AGRÍCOLAS, GANADERAS, SILVÍCOLAS, DE CAZA Y DE PESCA MUJERES': [14468, 7716, 10193, 8815, 11536, 11300, 9451, 11561, 10317, 6292, 6733, 8955, 6658, 5541, 4070],
    'TRABAJADORES INDUSTRIALES, ARTESANOS Y AYUDANTES HOMBRES': [168768, 170580, 178290, 165335, 168052, 164244, 172199, 160964, 171344, 166246, 183480, 166763, 168588, 183136, 163920],
    'TRABAJADORES INDUSTRIALES, ARTESANOS Y AYUDANTES MUJERES': [50409, 46077, 51214, 50439, 46573, 39683, 48200, 44525, 50127, 44957, 45529, 51181, 41345, 41456, 41396],
    'CONDUCTORES Y AYUDANTES DE CONDUCTORES DE MAQUINARÍA  MÓVIL Y MEDIOS DE TRANSPORTE HOMBRES': [39173, 37427, 37391, 39485, 35948, 37703, 40638, 38203, 40917, 43599, 43737, 42647, 40136, 38459, 35157],
    'CONDUCTORES Y AYUDANTES DE CONDUCTORES DE MAQUINARÍA  MÓVIL Y MEDIOS DE TRANSPORTE MUJERES': [676, 542, 906, 0, 569, 130, 455, 124, 650, 112, 701, 0, 320, 320, 0],
    'OFICINISTAS HOMBRES': [21366, 21793, 19971, 22423, 23523, 22476, 21289, 24484, 21265, 21060, 22066, 18272, 21797, 26507, 24844],
    'OFICINISTAS MUJERES': [26321, 29367, 28406, 27284, 28643, 30379, 33796, 27717, 30831, 31614, 28366, 27876, 30598, 31475, 34583],
    'COMERCIANTES HOMBRES': [880443, 74893, 74949, 72517, 74644, 68384, 67607, 67146, 62075, 66103, 68920, 72327, 68901, 68239, 65786],
    'COMERCIANTES MUJERES': [99927, 109368, 102955, 104979, 103489, 107949, 107730, 102316, 93888, 89739, 84275, 91364, 90415, 97219, 93782],
    'TRABAJADORES EN SERVICIO PERSONALES HOMBRES': [69349, 57081, 63420, 65882, 55710, 53541, 57281, 55104, 58408, 53939, 57692, 56268, 54363, 63458, 67497],
    'TRABAJADORES EN SERVICIO PERSONALES MUJERES': [105465, 108769, 110660, 115906, 101103, 110625, 111888, 113883, 106037, 104912, 108109, 101943, 101380, 93266, 88727],
    'TRABAJADORES EN SERVICIOS DE PROTECCIÓN Y VIGILANCIA Y FUERZAS ARMADAS HOMBRES': [5748, 4829, 5806, 5788, 4579, 6269, 6301, 4902, 5463, 4933, 5553, 5512, 3867, 4805, 3151],
    'TRABAJADORES EN SERVICIOS DE PROTECCIÓN Y VIGILANCIA Y FUERZAS ARMADAS MUJERES': [537, 764, 1488, 1590, 700, 1030, 2361, 1305, 1607, 1010, 1112, 317, 1304, 744, 933],
})

# Filtrar las columnas por "HOMBRES" y "MUJERES"
columns_hombres = [col for col in df_profesiones.columns if 'HOMBRES' in col]
columns_mujeres = [col for col in df_profesiones.columns if 'MUJERES' in col]

# Crear un DataFrame con las profesiones y las sumas por AÑO
profesiones = []

# Iterar sobre los años y las profesiones
for año in df_profesiones['AÑO'].unique():
    for col_hombres, col_mujeres in zip(columns_hombres, columns_mujeres):
        profesion = col_hombres.split(' HOMBRES')[0]  # Extraer el nombre de la profesión
        suma_hombres = df_profesiones[df_profesiones['AÑO'] == año][col_hombres].sum()
        suma_mujeres = df_profesiones[df_profesiones['AÑO'] == año][col_mujeres].sum()

        # Agregar los datos de cada profesión y su suma
        profesiones.append({
            'AÑO': año,
            'PROFESION': profesion,
            'SEXO': 'HOMBRES',
            'SUMA': suma_hombres
        })

        profesiones.append({
            'AÑO': año,
            'PROFESION': profesion,
            'SEXO': 'MUJERES',
            'SUMA': suma_mujeres
        })

# Crear un DataFrame a partir de los datos
df_profesiones_suma = pd.DataFrame(profesiones)

# Definir una lista de colores para las profesiones
color_map = {
        'PROFESIONISTAS, TÉCNICOS Y TRABAJADORES DEL ARTE': '#0D5ED9',
        'TRABAJADORES DE LA EDUCACIÓN': '#1b0bca',
        'FUNCIONARIOS Y DIRECTIVOS': '#240ef4',
        'TRABAJADORES EN ACTIVIDADES AGRÍCOLAS': '#000068',
        'TRABAJADORES INDUSTRIALES': '#3217ea',
        'CONDUCTORES Y AYUDANTES': '#1207a1',
        'OFICINISTAS': '#209BDB',
        'COMERCIANTES': '#0DB0D9',
        'TRABAJADORES EN SERVICIO PERSONALES': '#0e0781',
        'TRABAJADORES EN SERVICIOS DE PROTECCIÓN': '#2b15c1',
        'TRABAJADORES INDUSTRIALES, ARTESANOS Y AYUDANTES': '#0D74D9',
        'TRABAJADORES EN ACTIVIDADES AGRÍCOLAS, GANADERAS, SILVÍCOLAS, DE CAZA Y DE PESCA':'#1105eb',
        'CONDUCTORES Y AYUDANTES DE CONDUCTORES DE MAQUINARÍA  MÓVIL Y MEDIOS DE TRANSPORTE':'#00009c',
        'FUNCIONARIOS Y DIRECTIVOS DE LOS SECTORES PÚBLICO, PRIVADO Y SOCIAL': '#0D4DD9',
        'TRABAJADORES EN SERVICIOS DE PROTECCIÓN Y VIGILANCIA Y FUERZAS ARMADAS': '#000071'

    }

                                                                        ####GRÁFICOS######

app = dash.Dash(__name__, external_stylesheets=[dbc.themes.DARKLY])
server = app.server
# Función para crear el gráfico 'GENERAL'
def create_general_graph():
    fig_general = go.Figure()

    fig_general.add_trace(go.Scatter(x=df_pea['AÑO'], y=df_pea['PEA 1T'], mode='lines', name='PEA Total', line=dict(color='#4A90E2')))

    fig_general.update_layout(
        title="Población Económicamente Activa (PEA) por Año",
        xaxis_title="Año",
        yaxis_title="PEA",
        xaxis=dict(tickvals=[2020, 2021, 2022, 2023]),  # Ajustamos el eje X para mostrar solo los años completos
        template="plotly_dark"
    )

    return fig_general


# Función para crear el gráfico 'SEXO'
def create_sex_graph():
    df_hombres = df_pea_genero[df_pea_genero['SEXO'] == 'HOMBRES']
    df_mujeres = df_pea_genero[df_pea_genero['SEXO'] == 'MUJERES']

    fig_sexo = go.Figure()

    # Líneas para "Hombres"
    fig_sexo.add_trace(go.Scatter(x=df_hombres['AÑO'], y=df_hombres['PEA 1T'], mode='lines', name='Hombres', line=dict(color='#4A90E2')))
    fig_sexo.add_trace(go.Scatter(x=df_hombres['AÑO'], y=df_hombres['PEA2T'], mode='lines', name='Hombres 2T', line=dict(color='#50E3C2'), visible='legendonly'))
    fig_sexo.add_trace(go.Scatter(x=df_hombres['AÑO'], y=df_hombres['PEA3T'], mode='lines', name='Hombres 3T', line=dict(color='#F5A623'), visible='legendonly'))
    fig_sexo.add_trace(go.Scatter(x=df_hombres['AÑO'], y=df_hombres['PEA4T'], mode='lines', name='Hombres 4T', line=dict(color='#D0021B'), visible='legendonly'))

    # Líneas para "Mujeres"
    fig_sexo.add_trace(go.Scatter(x=df_mujeres['AÑO'], y=df_mujeres['PEA 1T'], mode='lines', name='Mujeres', line=dict(color='#F5A623')))
    fig_sexo.add_trace(go.Scatter(x=df_mujeres['AÑO'], y=df_mujeres['PEA2T'], mode='lines', name='Mujeres 2T', line=dict(color='#D0021B'), visible='legendonly'))
    fig_sexo.add_trace(go.Scatter(x=df_mujeres['AÑO'], y=df_mujeres['PEA3T'], mode='lines', name='Mujeres 3T', line=dict(color='#4A90E2'), visible='legendonly'))
    fig_sexo.add_trace(go.Scatter(x=df_mujeres['AÑO'], y=df_mujeres['PEA4T'], mode='lines', name='Mujeres 4T', line=dict(color='#50E3C2'), visible='legendonly'))

    # Ajustes del gráfico
    fig_sexo.update_layout(
        title="Población Económicamente Activa por Sexo",
        xaxis_title="Año",
        yaxis_title="PEA",
        xaxis=dict(tickvals=[2020, 2021, 2022, 2023, 2024]),  # Ajustar eje X a los años completos
        template="plotly_dark",
        legend_title="Trimestres"
    )

    return fig_sexo

def create_sector_graph():
    # Colores personalizados para cada sector
    color_map = {
        'Sector Primario': '#0CD2F5',  # Azul
        'Sector Secundario': '#1a0acb',  # Verde
        'Sector Terciario': '#0CF5E5',  # Rojo
        'No Especificado': '#1a0acb'  # Amarillo
    }

    fig_sectores = go.Figure()

    # Añadir las trazas con los colores personalizados y hovertemplate mejorado
    fig_sectores.add_trace(go.Bar(
        x=df_sectores['AÑO'],
        y=df_sectores['SECTOR PRIMARIO'],
        name='Sector Primario',
        hovertemplate=
        "<b>Año:</b> %{x}<br>" +  # Año
        "<b>Trimestre:</b> %{customdata[0]}<br>" +  # Trimestre
        "<b>Sector Primario:</b> %{y}<br>",  # Valor del Sector Primario
        marker_color=color_map['Sector Primario'],  # Asignar color personalizado
        customdata=df_sectores[['TRIMESTRE']],  # Asignar el trimestre como customdata
    ))

    fig_sectores.add_trace(go.Bar(
        x=df_sectores['AÑO'],
        y=df_sectores['SECTOR SECUNDARIO'],
        name='Sector Secundario',
        hovertemplate=
        "<b>Año:</b> %{x}<br>" +  # Año
        "<b>Trimestre:</b> %{customdata[0]}<br>" +  # Trimestre
        "<b>Sector Secundario:</b> %{y}<br>",  # Valor del Sector Secundario
        marker_color=color_map['Sector Secundario'],  # Asignar color personalizado
        customdata=df_sectores[['TRIMESTRE']],  # Asignar el trimestre como customdata
    ))

    fig_sectores.add_trace(go.Bar(
        x=df_sectores['AÑO'],
        y=df_sectores['SECTOR TERCIARIO'],
        name='Sector Terciario',
        hovertemplate=
        "<b>Año:</b> %{x}<br>" +  # Año
        "<b>Trimestre:</b> %{customdata[0]}<br>" +  # Trimestre
        "<b>Sector Terciario:</b> %{y}<br>",  # Valor del Sector Terciario
        marker_color=color_map['Sector Terciario'],  # Asignar color personalizado
        customdata=df_sectores[['TRIMESTRE']],  # Asignar el trimestre como customdata
    ))

    fig_sectores.add_trace(go.Bar(
        x=df_sectores['AÑO'],
        y=df_sectores['NO ESPECIFICADO'],
        name='No Especificado',
        hovertemplate=
        "<b>Año:</b> %{x}<br>" +  # Año
        "<b>Trimestre:</b> %{customdata[0]}<br>" +  # Trimestre
        "<b>No Especificado:</b> %{y}<br>",  # Valor de "No Especificado"
        marker_color=color_map['No Especificado'],  # Asignar color personalizado
        customdata=df_sectores[['TRIMESTRE']],  # Asignar el trimestre como customdata
    ))

    # Actualizar el layout
    fig_sectores.update_layout(
        title="Distribución de Sectores por Año",
        xaxis_title="Año",
        yaxis_title="Cantidad de Personas",
        barmode="stack",
        template="plotly_dark"
    )

    return fig_sectores

# Función para crear el gráfico de distribución socioeconómica
def create_socioeconomic_graph():
    df_sectores_estratos = pd.DataFrame({
        'AÑO': [2024, 2023, 2022, 2021, 2020],
        'Bajo': [126471, 114792, 105000, 120000, 98000],
        'Medio bajo': [572341, 616963, 570000, 590000, 530000],
        'Medio alto': [149929, 124938, 130000, 135000, 105000],
        'Alto': [39297, 36764, 38000, 35000, 31000]
    })

    fig_socioeconomic = go.Figure()

    fig_socioeconomic.add_trace(go.Scatter(x=df_sectores_estratos['AÑO'], y=df_sectores_estratos['Bajo'], fill='tozeroy', name='Bajo', line=dict(color='#180bc1')))
    fig_socioeconomic.add_trace(go.Scatter(x=df_sectores_estratos['AÑO'], y=df_sectores_estratos['Medio bajo'], fill='tonexty', name='Medio bajo', line=dict(color='#0CE5F5')))
    fig_socioeconomic.add_trace(go.Scatter(x=df_sectores_estratos['AÑO'], y=df_sectores_estratos['Medio alto'], fill='tonexty', name='Medio alto', line=dict(color='#0C52F5')))
    fig_socioeconomic.add_trace(go.Scatter(x=df_sectores_estratos['AÑO'], y=df_sectores_estratos['Alto'], fill='tonexty', name='Alto', line=dict(color='#000099')))

    fig_socioeconomic.update_layout(
        title="Distribución Socioeconómica por Rango en 2023",
        xaxis_title="Año",
        yaxis_title="Cantidad de Personas",
        template="plotly_dark",
        height=300,
        xaxis=dict(tickvals=[2020, 2021, 2022, 2023, 2024])
    )

    return fig_socioeconomic

def create_salarios_graph():
    # Calcular los promedios por año
    df_salarios_avg = df_salarios.groupby('AÑO').agg({
        'HASTA UN SALARIO MÍNIMO': 'mean',
        'MÁS DE 1 HASTA 2 SALARIOS MÍNIMOS': 'mean',
        'MÁS DE 2 HASTA 3 SALARIOS MÍNIMOS': 'mean',
        'MÁS DE 3 HASTA 5 SALARIOS MÍNIMOS': 'mean',
        'MÁS DE 5 SALARIOS MÍNIMOS': 'mean',
        'NO RECIBE INGRESOS': 'mean'
    }).reset_index()

    color_map = {
        'HASTA UN SALARIO MÍNIMO': '#0C67F5',  # Rojo
        'MÁS DE 1 HASTA 2 SALARIOS MÍNIMOS': '#0CF5EF',  # Verde
        'MÁS DE 2 HASTA 3 SALARIOS MÍNIMOS': '#3357FF',  # Azul
        'MÁS DE 3 HASTA 5 SALARIOS MÍNIMOS': '#0601fe',  # Amarillo
        'MÁS DE 5 SALARIOS MÍNIMOS': '#0C9FF5',  # Rosa
        'NO RECIBE INGRESOS': '#3333FF'  # Azul oscuro
    }

    # Crear el gráfico de barras laterales
    fig_salarios = go.Figure()

    for column in df_salarios_avg.columns[1:]:
        fig_salarios.add_trace(go.Bar(
            y=df_salarios_avg['AÑO'],
            x=df_salarios_avg[column],
            name=column,
            orientation='h',
            marker_color=color_map[column]  # Asignar el color correspondiente
        ))

    fig_salarios.update_layout(
        title="Distribución de Salarios Promedio por Año",
        xaxis_title="Cantidad de Personas",
        yaxis_title="Año",
        barmode="stack",
        template="plotly_dark"
    )

    return fig_salarios


# Función para crear el gráfico de barras laterales para los grupos de edad
def create_edad_graph():
    # Crear el gráfico de barras laterales
    fig_edad = go.Figure()

    # Colores para cada grupo de edad
    age_groups = ['15-19 AÑOS', '20-29 AÑOS', '30-39 AÑOS', '40-49 AÑOS', '50-59 AÑOS', '60 AÑOS Y MÁS']
    colors = ['#0C9BF5', '#0C52F5', '#4A90E2', '#0CA7F5', '#0CF5EF', '#0C14F5']

    # Crear las barras apiladas para cada grupo de edad
    for i, age_group in enumerate(age_groups):
        fig_edad.add_trace(go.Bar(
            y=df_edad_avg['AÑO'],
            x=df_edad_avg[age_group],
            name=age_group,
            orientation='h',
            marker=dict(color=colors[i])
        ))

    fig_edad.update_layout(
        title="Distribución por Grupos de Edad Promedio",
        xaxis_title="Promedio de Personas",
        yaxis_title="Año",
        barmode="stack",
        template="plotly_dark",
        height=400,  # Ajustar el tamaño del gráfico
        xaxis=dict(tickvals=[2020, 2021, 2022, 2023, 2024])  # Asegurar los valores en el eje X
    )

    return fig_edad

# Crear el Treemap con la estructura que mencionas
def create_treemap(df, title):
        fig = px.treemap(df,
                        path=['PROFESION', 'AÑO', 'SEXO'],  # Jerarquía de categorías (profesión, año, sexo)
                        values='SUMA',  # Usamos la suma de cada categoría como el valor
                        color='PROFESION',  # Colorear por la profesión
                        color_discrete_map=color_map,  # Mapa de colores fijos para cada profesión
                        title=title,
                        labels={'SEXO': 'Sexo', 'AÑO': 'Año', 'PROFESION': 'Profesión', 'SUMA': 'Suma'})

        fig.update_layout(
        paper_bgcolor='black',  # Fondo de toda la figura
        plot_bgcolor='black',   # Fondo del área del gráfico
        font=dict(color='white')  # Color de texto blanco para visibilidad
        )
        return fig




                                                                    ####LAYOUT####

app = dash.Dash(__name__, external_stylesheets=[dbc.themes.DARKLY])

app.layout = dbc.Container(
children=[
dbc.Row(
    children=[
        dbc.Col(
            html.H3(
                "ECONOMÍA LABORAL EN MORELOS (2020-2024)",
                style={
                    'color': '#007bff',  # Azul
                    'font-family': 'Montserrat, sans-serif',  # Fuente Montserrat
                    'font-weight': 'bold',  # Negrita para resaltar el título
                    'textAlign': 'center',  # Centrado
                    'font-size': '32px'  # Tamaño de la fuente
                }
            ),
            width=12
        )
    ]
),
        # Descripción debajo del título
        dbc.Row(
            children=[dbc.Col(html.P("Conoce a través de los datos, la situación laboral de las y los morelenses",
                                     style={'color': 'white', 'font-size': '28px'}), width=40)]
        ),

        dbc.Row(
            children=[  # Cuadros de información
                dbc.Col(html.Div([  # Cuadros de información
                    dbc.Row([  # Cuadro de Población ocupada, Población económicamente activa e Ingreso mensual
                        dbc.Col(html.P(f"Población ocupada: {df_general['Población ocupada']}", style={"color": "white", "background-color": "#4A90E2", "padding": "10px"}), width=4),
                        dbc.Col(html.P(f"Población económicamente activa: {df_general['Población económicamente activa']}", style={"color": "white", "background-color": "#4A90E2", "padding": "10px"}), width=4),
                        dbc.Col(html.P(f"Ingreso promedio mensual: {df_general['Ingreso promedio mensual']}", style={"color": "white", "background-color": "#4A90E2", "padding": "10px"}), width=4)
                    ]),
                    dbc.Row([  # Cuadro de Hombres y Mujeres
                        dbc.Col(html.P(f"Hombres: {df_general['Hombres']}", style={"color": "white", "background-color": "#0C52F5", "padding": "10px"}), width=6),
                        dbc.Col(html.P(f"Mujeres: {df_general['Mujeres']}", style={"color": "white", "background-color": "#7354de", "padding": "10px"}), width=6)
                    ]),
                    dbc.Row([  # Cuadro de Formalidad e Informalidad
                        dbc.Col(html.P(f"Formalidad: {df_general['Formalidad']}", style={"color": "white", "background-color": "#33F2E5", "padding": "10px"}), width=6),
                        dbc.Col(html.P(f"Informalidad: {df_general['Informalidad']}", style={"color": "white", "background-color": "#3386F2", "padding": "10px"}), width=6)
                    ])
                ]), width=12)
            ]
        ),
        dbc.Row(  # Dropdown
            children=[dbc.Col(dcc.Dropdown(
                id="dropdown-chart",
                options=[
                    {"label": "GENERAL", "value": "GENERAL"},
                    {"label": "SEXO", "value": "SEXO"}
                ],
                value="GENERAL",
                style={'width': '50%', 'color': 'black'}
            ), width=12)]
        ),
        dbc.Row([  # Contenedor de gráficos
            dbc.Col(dcc.Graph(id='chart-container', style={'height': '400px'}), width=6),
            dbc.Col(dcc.Graph(figure=create_edad_graph(), style={'height': '400px'}), width=6),
        ]),
        dbc.Row([  # Gráfico de Sectores
            dbc.Col(dcc.Graph(figure=create_sector_graph()), width=12)
        ]),
        dbc.Row([  # Nueva fila con dos gráficos
            dbc.Col(dcc.Graph(figure=create_socioeconomic_graph(), style={'height': '400px'}), width=6),
            dbc.Col(dcc.Graph(figure=create_salarios_graph(), style={'height': '400px'}), width=6)
        ]),
        dbc.Row([  # Dropdown para AÑO
            dbc.Col(dcc.Dropdown(
            id="dropdown-año",
            options=[{"label": str(year), "value": year} for year in df_profesiones['AÑO'].unique()],
            value=2024,
            style={'width': '50%', 'color': 'black'}  # Cambia el color del texto a negro
            ), width=4),
         ]),
        # El Treemap va en la parte inferior
        dbc.Row([
            dbc.Col(dcc.Graph(id='treemap-profesiones'), width=12)  # Treemap en toda la fila
        ]),
# Fuentes de datos debajo del gráfico de Treemap
dbc.Row([
    dbc.Col(html.H5("Fuentes de datos:", style={'color': 'white', 'font-weight': 'bold', 'textAlign': 'center'}), width=12),

    # Enlace con un estilo dinámico
    dbc.Col(
        html.Div([
            html.A(
                "Sistema Nacional de Información Municipal",
                href="http://www.snim.rami.gob.mx/",
                target="_blank",
                style={'color': '#00aaff', 'font-size': '16px', 'font-weight': 'bold', 'text-decoration': 'none'}
            ),
            html.Br(),
            html.Small("Consulta en el sitio web oficial"),
        ], style={'padding': '10px', 'backgroundColor': '#282828', 'border-radius': '5px', 'margin-top': '10px', 'textAlign': 'center'}),
        width=12
    ),

    # Otro enlace dinámico
    dbc.Col(
        html.Div([
            html.A(
                "Encuesta Nacional del Empleo",
                href="https://www.inegi.org.mx/programas/enoe/",
                target="_blank",
                style={'color': '#00aaff', 'font-size': '16px', 'font-weight': 'bold', 'text-decoration': 'none'}
            ),
            html.Br(),
            html.Small("Consulta las encuestas completas aquí."),
        ], style={'padding': '10px', 'backgroundColor': '#282828', 'border-radius': '5px', 'margin-top': '10px', 'textAlign': 'center'}),
        width=12
    ),

    # Otro enlace
    dbc.Col(
        html.Div([
            html.A(
                "Observatorio Laboral del Servicio Nacional del Empleo",
                href="https://www.observatoriolaboral.gob.mx/static/estudios-publicaciones/Informe_IMSS.html",
                target="_blank",
                style={'color': '#00aaff', 'font-size': '16px', 'font-weight': 'bold', 'text-decoration': 'none'}
            ),
            html.Br(),
            html.Small("Información sobre el empleo en México."),
        ], style={'padding': '10px', 'backgroundColor': '#282828', 'border-radius': '5px', 'margin-top': '10px', 'textAlign': 'center'}),
        width=12
    ),

    # Otro enlace más
    dbc.Col(
        html.Div([
            html.A(
                "Indicadores Laborales para los Municipios de México",
                href="https://www.inegi.org.mx/programas/ilmm/#datos_abiertos",
                target="_blank",
                style={'color': '#00aaff', 'font-size': '16px', 'font-weight': 'bold', 'text-decoration': 'none'}
            ),
            html.Br(),
            html.Small("Accede a los datos abiertos de los indicadores."),
        ], style={'padding': '10px', 'backgroundColor': '#282828', 'border-radius': '5px', 'margin-top': '10px', 'textAlign': 'center'}),
        width=12
    ),
]),

# Información del autor al final de la aplicación
dbc.Row(
    [
        dbc.Col(
            html.P("Aplicativo elaborado por Lic.C.Pol. Eduardo Cabrera Gutiérrez",
                   style={'color': 'white', 'font-weight': 'bold', 'textAlign': 'right'}),  # Cambiado a 'left'
            width=12
        ),
        dbc.Col(
            html.P("cabardo.gutz@gmail.com",
                   style={'color': 'white', 'textAlign': 'right'}),  # Cambiado a 'left'
            width=12
        ),
    ],
    style={'display': 'flex', 'align-items': 'center', 'height': '100px'}
)
    ],
    fluid=True
)




                                                                  #####CALLBACK####
@app.callback(
    [Output('treemap-profesiones', 'figure'),
     Output('chart-container', 'figure')],  # Ambos Outputs en una lista
    [Input('dropdown-año', 'value'),
     Input('dropdown-chart', 'value')]  # Ambos Inputs en una lista
)
def update_graphs(selected_año, selected_value):
    # Filtrar los datos por AÑO
    filtered_data = df_profesiones_suma[df_profesiones_suma['AÑO'] == selected_año]

    # Crear el treemap
    treemap_fig = create_treemap(filtered_data, f"Distribución de personas por Profesión y Sexo ({selected_año})")

    # Crear el gráfico de acuerdo al tipo seleccionado
    if selected_value == 'GENERAL':
        chart_fig = create_general_graph()  # Si tienes esta función, cámbiala según tu implementación
    elif selected_value == 'SEXO':
        chart_fig = create_sex_graph()  # Si tienes esta función, cámbiala según tu implementación

    return treemap_fig, chart_fig  # Retornar ambos gráficos


                                                            ######EJECUCIÓN#####

if __name__ == '__main__':
    app.run_server(debug=False, host='0.0.0.0', port=8080)
